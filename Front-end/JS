let livros = [];
let reservas = [];
let emprestimos = [];
let leitores = [];
let editIndex = -1;

// Função para mostrar a página correspondente
function mostrarPagina(pagina) {
  const sections = document.querySelectorAll(".container");
  sections.forEach((section) => {
    section.style.display = "none";
  });
  document.getElementById(pagina).style.display = "block";
}

// Função para formatar CPF
function formatarCPF(cpf) {
  cpf = cpf.replace(/\D/g, "");
  cpf = cpf.replace(/(\d{3})(\d)/, "$1.$2");
  cpf = cpf.replace(/(\d{3})(\d)/, "$1.$2");
  cpf = cpf.replace(/(\d{3})(\d{1,2})$/, "$1-$2");
  return cpf;
}

// Função para formatar telefone
function formatarTelefone(telefone) {
  telefone = telefone.replace(/\D/g, "");
  telefone = telefone.replace(/(\d{2})(\d)/, "($1) $2");
  telefone = telefone.replace(/(\d{4,5})(\d{4})$/, "$1-$2");
  return telefone;
}

// Cadastro de Usuário
document
  .getElementById("cadastroUsuarioForm")
  .addEventListener("submit", function (event) {
    event.preventDefault();

    const nome = document.getElementById("nomeUsuario").value;
    const cpf = document.getElementById("cpfUsuario").value;
    const telefone = document.getElementById("telefoneUsuario").value;
    const email = document.getElementById("emailUsuario").value;
    const nivelAcesso = document.getElementById("nivelAcesso").value;
    const senha = document.getElementById("senhaUsuario").value;

    const usuario = {
      nome,
      cpf: formatarCPF(cpf),
      telefone: formatarTelefone(telefone),
      email,
      nivelAcesso,
      senha
    };

    cadastrarUsuario(usuario);

    document.getElementById("cadastroUsuarioForm").reset();
  });

// Função para cadastrar usuário na lista
function cadastrarUsuario(usuario) {
  const tbody = document.getElementById("usuariosCadastradosBody");
  const row = tbody.insertRow();

  row.insertCell(0).textContent = usuario.nome;
  row.insertCell(1).textContent = usuario.cpf;
  row.insertCell(2).textContent = usuario.telefone;
  row.insertCell(3).textContent = usuario.email;
  row.insertCell(4).textContent = usuario.nivelAcesso;

  const acoesCell = row.insertCell(5);
  const editarBtn = document.createElement("button");
  editarBtn.textContent = "Editar";
  editarBtn.addEventListener("click", () =>
    editarUsuario(tbody.rows.length - 1)
  );
  acoesCell.appendChild(editarBtn);

  const excluirBtn = document.createElement("button");
  excluirBtn.textContent = "Excluir";
  excluirBtn.addEventListener("click", () =>
    excluirUsuario(tbody.rows.length - 1)
  );
  acoesCell.appendChild(excluirBtn);
}

// Função para editar usuário
function editarUsuario(index) {
  const row = document.getElementById("usuariosCadastradosBody").rows[index];
  const nome = row.cells[0].textContent;
  const cpf = row.cells[1].textContent;
  const telefone = row.cells[2].textContent;
  const email = row.cells[3].textContent;
  const nivelAcesso = row.cells[4].textContent;

  document.getElementById("nomeUsuario").value = nome;
  document.getElementById("cpfUsuario").value = cpf;
  document.getElementById("telefoneUsuario").value = telefone;
  document.getElementById("emailUsuario").value = email;
  document.getElementById("nivelAcesso").value = nivelAcesso;

  excluirUsuario(index);
}

// Função para excluir usuário
function excluirUsuario(index) {
  document.getElementById("usuariosCadastradosBody").deleteRow(index);
}

// Cadastro de Leitor
document
  .getElementById("cadastroLeitorForm")
  .addEventListener("submit", function (event) {
    event.preventDefault();

    const nome = document.getElementById("nomeLeitor").value;
    const endereco = document.getElementById("enderecoLeitor").value;
    const telefone = document.getElementById("telefoneLeitor").value;
    const email = document.getElementById("emailLeitor").value;
    const cpf = document.getElementById("cpfLeitor").value;
    const senha = document.getElementById("senhaLeitor").value;

    const leitor = {
      nome,
      endereco,
      telefone: formatarTelefone(telefone),
      email,
      cpf: formatarCPF(cpf),
      senha
    };

    cadastrarLeitor(leitor);

    document.getElementById("cadastroLeitorForm").reset();
  });

// Função para cadastrar leitor na lista
function cadastrarLeitor(leitor) {
  leitores.push(leitor); // Armazenar o leitor na lista de leitores
  const tbody = document.getElementById("leitoresCadastradosBody");
  const row = tbody.insertRow();

  row.insertCell(0).textContent = leitor.nome;
  row.insertCell(1).textContent = leitor.endereco;
  row.insertCell(2).textContent = leitor.telefone;
  row.insertCell(3).textContent = leitor.email;
  row.insertCell(4).textContent = leitor.cpf;

  const acoesCell = row.insertCell(5);
  const editarBtn = document.createElement("button");
  editarBtn.textContent = "Editar";
  editarBtn.addEventListener("click", () =>
    editarLeitor(tbody.rows.length - 1)
  );
  acoesCell.appendChild(editarBtn);

  const excluirBtn = document.createElement("button");
  excluirBtn.textContent = "Excluir";
  excluirBtn.addEventListener("click", () =>
    excluirLeitor(tbody.rows.length - 1)
  );
  acoesCell.appendChild(excluirBtn);
}

// Função para editar leitor
function editarLeitor(index) {
  const row = document.getElementById("leitoresCadastradosBody").rows[index];
  const nome = row.cells[0].textContent;
  const endereco = row.cells[1].textContent;
  const telefone = row.cells[2].textContent;
  const email = row.cells[3].textContent;
  const cpf = row.cells[4].textContent;

  document.getElementById("nomeLeitor").value = nome;
  document.getElementById("enderecoLeitor").value = endereco;
  document.getElementById("telefoneLeitor").value = telefone;
  document.getElementById("emailLeitor").value = email;
  document.getElementById("cpfLeitor").value = cpf;

  excluirLeitor(index);
}

// Função para excluir leitor
function excluirLeitor(index) {
  leitores.splice(index, 1); // Remover o leitor da lista de leitores
  document.getElementById("leitoresCadastradosBody").deleteRow(index);
}

// Funções para manipulação de dados de livros

// Função para cadastrar livro
document
  .getElementById("cadastrarLivroForm")
  .addEventListener("submit", function (event) {
    event.preventDefault();

    const titulo = document.getElementById("titulo").value;
    const autor = document.getElementById("autor").value;
    const genero = document.getElementById("genero").value;
    const dataPublicacao = document.getElementById("dataPublicacao").value;
    const isbn = document.getElementById("isbn").value;
    const disponibilidade = document.getElementById("disponibilidade").value;
    const quantidade = document.getElementById("quantidade").value;

    const livro = {
      titulo,
      autor,
      genero,
      dataPublicacao,
      isbn,
      disponibilidade,
      quantidade
    };

    if (editIndex === -1) {
      livros.push(livro);
    } else {
      livros[editIndex] = livro;
      editIndex = -1;
    }

    document.getElementById("cadastrarLivroForm").reset();
    atualizarTabelaLivros();
    document.getElementById("cadastrarBtn").style.display = "block";
    document.getElementById("editarBtn").style.display = "none";
  });

// Função para atualizar a tabela de livros cadastrados
function atualizarTabelaLivros() {
  const tbody = document.getElementById("livrosCadastradosBody");
  tbody.innerHTML = "";

  livros.forEach((livro, index) => {
    const row = tbody.insertRow();

    row.insertCell(0).textContent = livro.titulo;
    row.insertCell(1).textContent = livro.autor;
    row.insertCell(2).textContent = livro.genero;
    row.insertCell(3).textContent = livro.dataPublicacao;
    row.insertCell(4).textContent = livro.isbn;
    row.insertCell(5).textContent = livro.disponibilidade;
    row.insertCell(6).textContent = livro.quantidade;

    const acoesCell = row.insertCell(7);
    const editarBtn = document.createElement("button");
    editarBtn.textContent = "Editar";
    editarBtn.addEventListener("click", () => editarLivro(index));
    acoesCell.appendChild(editarBtn);

    const excluirBtn = document.createElement("button");
    excluirBtn.textContent = "Excluir";
    excluirBtn.addEventListener("click", () => excluirLivro(index));
    acoesCell.appendChild(excluirBtn);
  });
}

// Função para editar livro
function editarLivro(index) {
  const livro = livros[index];

  document.getElementById("titulo").value = livro.titulo;
  document.getElementById("autor").value = livro.autor;
  document.getElementById("genero").value = livro.genero;
  document.getElementById("dataPublicacao").value = livro.dataPublicacao;
  document.getElementById("isbn").value = livro.isbn;
  document.getElementById("disponibilidade").value = livro.disponibilidade;
  document.getElementById("quantidade").value = livro.quantidade;

  editIndex = index;

  document.getElementById("cadastrarBtn").style.display = "none";
  document.getElementById("editarBtn").style.display = "block";
}

// Função para salvar alterações de um livro editado
function salvarAlteracoes() {
  const titulo = document.getElementById("titulo").value;
  const autor = document.getElementById("autor").value;
  const genero = document.getElementById("genero").value;
  const dataPublicacao = document.getElementById("dataPublicacao").value;
  const isbn = document.getElementById("isbn").value;
  const disponibilidade = document.getElementById("disponibilidade").value;
  const quantidade = document.getElementById("quantidade").value;

  const livro = {
    titulo,
    autor,
    genero,
    dataPublicacao,
    isbn,
    disponibilidade,
    quantidade
  };

  if (editIndex !== -1) {
    livros[editIndex] = livro;
    editIndex = -1;
  }

  document.getElementById("cadastrarLivroForm").reset();
  atualizarTabelaLivros();
  document.getElementById("cadastrarBtn").style.display = "block";
  document.getElementById("editarBtn").style.display = "none";
}

// Função para excluir livro
function excluirLivro(index) {
  livros.splice(index, 1);
  atualizarTabelaLivros();
}

// Função para consultar livro
document
  .getElementById("consultarLivroForm")
  .addEventListener("submit", function (event) {
    event.preventDefault();

    const consultaTitulo = document
      .getElementById("consultaTitulo")
      .value.toLowerCase();
    const resultados = livros.filter((livro) =>
      livro.titulo.toLowerCase().includes(consultaTitulo)
    );

    const tbody = document.getElementById("resultadosPesquisaBody");
    tbody.innerHTML = "";

    resultados.forEach((livro) => {
      const row = tbody.insertRow();

      row.insertCell(0).textContent = livro.titulo;
      row.insertCell(1).textContent = livro.autor;
      row.insertCell(2).textContent = livro.genero;
      row.insertCell(3).textContent = livro.dataPublicacao;
      row.insertCell(4).textContent = livro.isbn;
      row.insertCell(5).textContent = livro.disponibilidade;
      row.insertCell(6).textContent = livro.quantidade;
    });
  });

// Função para registrar empréstimo
document
  .getElementById("emprestimoLivroForm")
  .addEventListener("submit", function (event) {
    event.preventDefault();

    const isbn = document.getElementById("isbnEmprestimo").value;
    const cpf = document.getElementById("cpf").value;
    const nome = document.getElementById("nome").value;
    const dataEmprestimo = document.getElementById("dataEmprestimo").value;

    if (!validarLeitor(cpf)) {
      alert("CPF não cadastrado. Por favor, cadastre o leitor primeiro.");
      return;
    }

    const livro = livros.find((livro) => livro.isbn === isbn);

    if (
      livro &&
      livro.disponibilidade === "disponivel" &&
      livro.quantidade > 0
    ) {
      const dataDevolucao = new Date(dataEmprestimo);
      dataDevolucao.setDate(dataDevolucao.getDate() + 14);

      const emprestimo = {
        isbn,
        cpf: formatarCPF(cpf),
        nome,
        dataEmprestimo,
        dataDevolucao: dataDevolucao.toISOString().split("T")[0],
        status: "emprestado"
      };

      emprestimos.push(emprestimo);
      livro.quantidade--;
      if (livro.quantidade === 0) {
        livro.disponibilidade = "naoDisponivel";
      }

      atualizarTabelaEmprestimos();
      atualizarTabelaLivros();
    } else {
      alert("Livro não disponível para empréstimo.");
    }

    document.getElementById("emprestimoLivroForm").reset();
  });

// Função para atualizar a tabela de empréstimos
function atualizarTabelaEmprestimos() {
  const tbody = document.getElementById("emprestimosBody");
  tbody.innerHTML = "";

  emprestimos.forEach((emprestimo, index) => {
    const row = tbody.insertRow();

    row.insertCell(0).textContent = emprestimo.isbn;
    row.insertCell(1).textContent = emprestimo.cpf;
    row.insertCell(2).textContent = emprestimo.nome;
    row.insertCell(3).textContent = emprestimo.dataEmprestimo;
    row.insertCell(4).textContent = emprestimo.dataDevolucao;
    row.insertCell(5).textContent = emprestimo.status;

    const acoesCell = row.insertCell(6);
    const renovarBtn = document.createElement("button");
    renovarBtn.textContent = "Renovar";
    renovarBtn.addEventListener("click", () => renovarEmprestimo(index));

    const dataDevolucao = new Date(emprestimo.dataDevolucao);
    const hoje = new Date();
    const doisDias = 2 * 24 * 60 * 60 * 1000;

    if (dataDevolucao - hoje <= doisDias) {
      acoesCell.appendChild(renovarBtn);
    }

    const editarBtn = document.createElement("button");
    editarBtn.textContent = "Editar";
    editarBtn.addEventListener("click", () => editarEmprestimo(index));
    acoesCell.appendChild(editarBtn);

    const excluirBtn = document.createElement("button");
    excluirBtn.textContent = "Remover";
    excluirBtn.addEventListener("click", () => removerEmprestimo(index));
    acoesCell.appendChild(excluirBtn);
  });
}

// Função para renovar empréstimo
function renovarEmprestimo(index) {
  const emprestimo = emprestimos[index];
  const novaDataDevolucao = new Date(emprestimo.dataDevolucao);
  novaDataDevolucao.setDate(novaDataDevolucao.getDate() + 14);
  emprestimo.dataDevolucao = novaDataDevolucao.toISOString().split("T")[0];
  atualizarTabelaEmprestimos();
}

// Função para editar empréstimo
function editarEmprestimo(index) {
  const emprestimo = emprestimos[index];

  document.getElementById("isbnEmprestimo").value = emprestimo.isbn;
  document.getElementById("cpf").value = emprestimo.cpf;
  document.getElementById("nome").value = emprestimo.nome;
  document.getElementById("dataEmprestimo").value = emprestimo.dataEmprestimo;

  removerEmprestimo(index);
}

// Função para remover empréstimo
function removerEmprestimo(index) {
  emprestimos.splice(index, 1);
  atualizarTabelaEmprestimos();
}

// Função para registrar reserva
document
  .getElementById("reservaLivroForm")
  .addEventListener("submit", function (event) {
    event.preventDefault();

    const isbn = document.getElementById("isbnReserva").value;
    const cpf = document.getElementById("cpfReserva").value;
    const nome = document.getElementById("nomeReserva").value;
    const dataReserva = document.getElementById("dataReserva").value;

    if (!validarLeitor(cpf)) {
      alert("CPF não cadastrado. Por favor, cadastre o leitor primeiro.");
      return;
    }

    const livro = livros.find((livro) => livro.isbn === isbn);

    if (livro) {
      const reserva = {
        isbn,
        cpf: formatarCPF(cpf),
        nome,
        dataReserva
      };

      reservas.push(reserva);
      atualizarTabelaReservas();
    } else {
      alert("Livro não encontrado.");
    }

    document.getElementById("reservaLivroForm").reset();
  });

// Função para atualizar a tabela de reservas
function atualizarTabelaReservas() {
  const tbody = document.getElementById("reservasBody");
  tbody.innerHTML = "";

  reservas.forEach((reserva, index) => {
    const row = tbody.insertRow();

    row.insertCell(0).textContent = reserva.isbn;
    row.insertCell(1).textContent = reserva.cpf;
    row.insertCell(2).textContent = reserva.nome;
    row.insertCell(3).textContent = reserva.dataReserva;

    const acoesCell = row.insertCell(4);

    const editarBtn = document.createElement("button");
    editarBtn.textContent = "Editar";
    editarBtn.addEventListener("click", () => editarReserva(index));
    acoesCell.appendChild(editarBtn);

    const excluirBtn = document.createElement("button");
    excluirBtn.textContent = "Remover";
    excluirBtn.addEventListener("click", () => removerReserva(index));
    acoesCell.appendChild(excluirBtn);
  });
}

// Função para editar reserva
function editarReserva(index) {
  const reserva = reservas[index];

  document.getElementById("isbnReserva").value = reserva.isbn;
  document.getElementById("cpfReserva").value = reserva.cpf;
  document.getElementById("nomeReserva").value = reserva.nome;
  document.getElementById("dataReserva").value = reserva.dataReserva;

  removerReserva(index);
}

// Função para remover reserva
function removerReserva(index) {
  reservas.splice(index, 1);
  atualizarTabelaReservas();
}

// Função para validar se o CPF pertence a um leitor registrado
function validarLeitor(cpf) {
  const leitorEncontrado = leitores.find(
    (leitor) => leitor.cpf === formatarCPF(cpf)
  );
  return leitorEncontrado !== undefined;
}

// Adiciona eventos de formatação aos campos de CPF e telefone
document.getElementById("cpfUsuario").addEventListener("input", function () {
  this.value = formatarCPF(this.value);
});

document
  .getElementById("telefoneUsuario")
  .addEventListener("input", function () {
    this.value = formatarTelefone(this.value);
  });

document.getElementById("cpfLeitor").addEventListener("input", function () {
  this.value = formatarCPF(this.value);
});

document
  .getElementById("telefoneLeitor")
  .addEventListener("input", function () {
    this.value = formatarTelefone(this.value);
  });

document.getElementById("cpf").addEventListener("input", function () {
  this.value = formatarCPF(this.value);
});

document.getElementById("cpfReserva").addEventListener("input", function () {
  this.value = formatarCPF(this.value);
});

// Função para gerar relatório de livros
function gerarRelatorioLivros() {
  const livrosRelatorio = livros.map((livro) => ({
    Título: livro.titulo,
    Autor: livro.autor,
    Gênero: livro.genero,
    "Data de Publicação": livro.dataPublicacao,
    "Código ISBN": livro.isbn,
    Disponibilidade: livro.disponibilidade,
    Quantidade: livro.quantidade
  }));

  const relatorioWindow = window.open("", "", "width=800,height=600");
  relatorioWindow.document.write(
    "<html><head><title>Relatório de Livros</title>"
  );
  relatorioWindow.document.write(
    "<style>table {width: 100%; border-collapse: collapse;} table, th, td {border: 1px solid black;} th, td {padding: 10px; text-align: left;} th {background-color: #f2f2f2;}</style>"
  );
  relatorioWindow.document.write("</head><body>");
  relatorioWindow.document.write("<h2>Relatório de Livros Cadastrados</h2>");
  relatorioWindow.document.write(
    "<table><thead><tr><th>Título</th><th>Autor</th><th>Gênero</th><th>Data de Publicação</th><th>Código ISBN</th><th>Disponibilidade</th><th>Quantidade</th></tr></thead><tbody>"
  );

  livrosRelatorio.forEach((livro) => {
    relatorioWindow.document.write("<tr>");
    relatorioWindow.document.write(`<td>${livro["Título"]}</td>`);
    relatorioWindow.document.write(`<td>${livro["Autor"]}</td>`);
    relatorioWindow.document.write(`<td>${livro["Gênero"]}</td>`);
    relatorioWindow.document.write(`<td>${livro["Data de Publicação"]}</td>`);
    relatorioWindow.document.write(`<td>${livro["Código ISBN"]}</td>`);
    relatorioWindow.document.write(`<td>${livro["Disponibilidade"]}</td>`);
    relatorioWindow.document.write(`<td>${livro["Quantidade"]}</td>`);
    relatorioWindow.document.write("</tr>");
  });

  relatorioWindow.document.write("</tbody></table>");
  relatorioWindow.document.write("</body></html>");
  relatorioWindow.document.close();
  relatorioWindow.print();
}

// Função para gerar relatório de leitores
function gerarRelatorioLeitores() {
  const leitoresRelatorio = leitores.map((leitor) => ({
    Nome: leitor.nome,
    Endereço: leitor.endereco,
    Telefone: leitor.telefone,
    Email: leitor.email,
    CPF: leitor.cpf
  }));

  const relatorioWindow = window.open("", "", "width=800,height=600");
  relatorioWindow.document.write(
    "<html><head><title>Relatório de Leitores</title>"
  );
  relatorioWindow.document.write(
    "<style>table {width: 100%; border-collapse: collapse;} table, th, td {border: 1px solid black;} th, td {padding: 10px; text-align: left;} th {background-color: #f2f2f2;}</style>"
  );
  relatorioWindow.document.write("</head><body>");
  relatorioWindow.document.write("<h2>Relatório de Leitores Cadastrados</h2>");
  relatorioWindow.document.write(
    "<table><thead><tr><th>Nome</th><th>Endereço</th><th>Telefone</th><th>Email</th><th>CPF</th></tr></thead><tbody>"
  );

  leitoresRelatorio.forEach((leitor) => {
    relatorioWindow.document.write("<tr>");
    relatorioWindow.document.write(`<td>${leitor["Nome"]}</td>`);
    relatorioWindow.document.write(`<td>${leitor["Endereço"]}</td>`);
    relatorioWindow.document.write(`<td>${leitor["Telefone"]}</td>`);
    relatorioWindow.document.write(`<td>${leitor["Email"]}</td>`);
    relatorioWindow.document.write(`<td>${leitor["CPF"]}</td>`);
    relatorioWindow.document.write("</tr>");
  });

  relatorioWindow.document.write("</tbody></table>");
  relatorioWindow.document.write("</body></html>");
  relatorioWindow.document.close();
  relatorioWindow.print();
}

